comparison_array = table.values == expected_table.values
print comparison_array

>>>[[True, True, True]
    [True, False, True]]

if False in comparison_array:
    print "Not the same"

#Return the position of the False values
np.where(comparison_array==False)

https://stackoverflow.com/questions/17095101/outputting-difference-in-two-pandas-dataframes-side-by-side-highlighting-the-d

# condition = df_c['firstname'] != df_d['firstname']
# diff1 = df_c[condition]
# diff2 = df_d[condition]
# diff1.merge(diff2,on=['firstname','lastname'],suffixes=('_before','_after'))

# print (df_c != df_d).any(axis=0)

#%%
# df_all = pd.concat([df_c.set_index('customerid'), df_d.set_index('customerid')],
#                    axis='columns', keys=['First', 'Second'])
# df_final = df_all.swaplevel(axis='columns')[df_c.columns[1:]]
# def highlight_diff(df_final, color='yellow'):
#     attr = 'background-color: {}'.format(color)
#     other = df_final.xs('First', axis='columns', level=-1)
#     return pd.DataFrame(np.where(df_final.ne(other, level=0), attr, ''),
#                         index=df_final.index, columns=df_final.columns)
#
# df_final.style.apply(highlight_diff, axis=None)
#
# #print df
# print df_final.drop_duplicates()

        df_a = pd.read_sql("SELECT * FROM pg_catalog.pg_tables WHERE schemaname != 'pg_catalog' AND schemaname != 'information_schema'", con=engine)
        df_b = pd.read_sql("SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS ", con=engine)
        df_e = pd.read_sql("select column_name,data_type,character_maximum_length from information_schema.columns where table_name = 'customers';;", con=engine2)

select count(*), email from customers group by email having count(*) > 1